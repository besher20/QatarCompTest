// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using QatarPaymentTest.Data.DbContextApp;

#nullable disable

namespace QatarPaymentTest.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250621125739_initialDb")]
    partial class initialDb
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "citext");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CompanyContacts", b =>
                {
                    b.Property<int>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<int>("ContactId")
                        .HasColumnType("integer");

                    b.HasKey("CompanyId", "ContactId");

                    b.HasIndex("ContactId");

                    b.ToTable("CompanyContacts");

                    b.HasData(
                        new
                        {
                            CompanyId = 1,
                            ContactId = 1
                        },
                        new
                        {
                            CompanyId = 2,
                            ContactId = 2
                        },
                        new
                        {
                            CompanyId = 3,
                            ContactId = 3
                        });
                });

            modelBuilder.Entity("QatarPaymentTest.Models.Entities.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("citext");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("IX_Companies_Name_Search");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("Name"), "gist");
                    NpgsqlIndexBuilderExtensions.HasOperators(b.HasIndex("Name"), new[] { "gist_trgm_ops" });

                    b.ToTable("Companies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Leading technology company",
                            IsDeleted = false,
                            Name = "Microsoft Corporation"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Search and technology giant",
                            IsDeleted = false,
                            Name = "Google LLC"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Consumer electronics and software",
                            IsDeleted = false,
                            Name = "Apple Inc."
                        });
                });

            modelBuilder.Entity("QatarPaymentTest.Models.Entities.CompanyCustomFieldValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CustomFieldId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CustomFieldId");

                    b.HasIndex("Value");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("Value"), "gin");
                    NpgsqlIndexBuilderExtensions.HasOperators(b.HasIndex("Value"), new[] { "gin_trgm_ops" });

                    b.HasIndex("CompanyId", "CustomFieldId")
                        .IsUnique();

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("CompanyId", "CustomFieldId"), "btree");

                    b.ToTable("CompanyCustomFieldValues");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CompanyId = 1,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CustomFieldId = 3,
                            Value = "150000"
                        },
                        new
                        {
                            Id = 2,
                            CompanyId = 2,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CustomFieldId = 3,
                            Value = "180000"
                        },
                        new
                        {
                            Id = 3,
                            CompanyId = 3,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CustomFieldId = 3,
                            Value = "160000"
                        });
                });

            modelBuilder.Entity("QatarPaymentTest.Models.Entities.Contact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("citext");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("citext");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsInactive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("citext");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("IX_Contacts_Email_Search");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("Email"), "gist");
                    NpgsqlIndexBuilderExtensions.HasOperators(b.HasIndex("Email"), new[] { "gist_trgm_ops" });

                    b.ToTable("Contacts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "ahmed.m@example.com",
                            FirstName = "أحمد",
                            IsDeleted = false,
                            IsInactive = false,
                            IsPrimary = true,
                            LastName = "محمد"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "sara.a@example.com",
                            FirstName = "سارة",
                            IsDeleted = false,
                            IsInactive = false,
                            IsPrimary = true,
                            LastName = "أحمد"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "mohamed.a@example.com",
                            FirstName = "محمد",
                            IsDeleted = false,
                            IsInactive = false,
                            IsPrimary = true,
                            LastName = "علي"
                        });
                });

            modelBuilder.Entity("QatarPaymentTest.Models.Entities.ContactCustomFieldValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ContactId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CustomFieldId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CustomFieldId");

                    b.HasIndex("Value");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("Value"), "gin");
                    NpgsqlIndexBuilderExtensions.HasOperators(b.HasIndex("Value"), new[] { "gin_trgm_ops" });

                    b.HasIndex("ContactId", "CustomFieldId")
                        .IsUnique();

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("ContactId", "CustomFieldId"), "btree");

                    b.ToTable("ContactCustomFieldValues");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ContactId = 1,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CustomFieldId = 1,
                            Value = "1990-01-01"
                        },
                        new
                        {
                            Id = 2,
                            ContactId = 1,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CustomFieldId = 2,
                            Value = "+974 3000 0001"
                        },
                        new
                        {
                            Id = 3,
                            ContactId = 2,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CustomFieldId = 1,
                            Value = "1992-05-15"
                        },
                        new
                        {
                            Id = 4,
                            ContactId = 2,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CustomFieldId = 2,
                            Value = "+974 3000 0002"
                        },
                        new
                        {
                            Id = 5,
                            ContactId = 3,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CustomFieldId = 1,
                            Value = "1988-12-30"
                        },
                        new
                        {
                            Id = 6,
                            ContactId = 3,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CustomFieldId = 2,
                            Value = "+974 3000 0003"
                        });
                });

            modelBuilder.Entity("QatarPaymentTest.Models.Entities.CustomField", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DefaultValue")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("EntityType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("FieldType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsRequired")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("citext");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Name", "EntityType")
                        .IsUnique();

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("Name", "EntityType"), "btree");

                    b.ToTable("CustomFields");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "تاريخ ميلاد جهة الاتصال",
                            EntityType = "Contact",
                            FieldType = "Date",
                            IsActive = true,
                            IsDeleted = false,
                            IsRequired = true,
                            Name = "تاريخ الميلاد"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "رقم هاتف جهة الاتصال",
                            EntityType = "Contact",
                            FieldType = "Text",
                            IsActive = true,
                            IsDeleted = false,
                            IsRequired = true,
                            Name = "رقم الهاتف"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "عدد الموظفين في الشركة",
                            EntityType = "Company",
                            FieldType = "Number",
                            IsActive = true,
                            IsDeleted = false,
                            IsRequired = false,
                            Name = "عدد الموظفين"
                        });
                });

            modelBuilder.Entity("CompanyContacts", b =>
                {
                    b.HasOne("QatarPaymentTest.Models.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QatarPaymentTest.Models.Entities.Contact", null)
                        .WithMany()
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QatarPaymentTest.Models.Entities.CompanyCustomFieldValue", b =>
                {
                    b.HasOne("QatarPaymentTest.Models.Entities.Company", "Company")
                        .WithMany("CustomFieldValues")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QatarPaymentTest.Models.Entities.CustomField", "CustomField")
                        .WithMany("CompanyValues")
                        .HasForeignKey("CustomFieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("CustomField");
                });

            modelBuilder.Entity("QatarPaymentTest.Models.Entities.ContactCustomFieldValue", b =>
                {
                    b.HasOne("QatarPaymentTest.Models.Entities.Contact", "Contact")
                        .WithMany("CustomFieldValues")
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QatarPaymentTest.Models.Entities.CustomField", "CustomField")
                        .WithMany("ContactValues")
                        .HasForeignKey("CustomFieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contact");

                    b.Navigation("CustomField");
                });

            modelBuilder.Entity("QatarPaymentTest.Models.Entities.Company", b =>
                {
                    b.Navigation("CustomFieldValues");
                });

            modelBuilder.Entity("QatarPaymentTest.Models.Entities.Contact", b =>
                {
                    b.Navigation("CustomFieldValues");
                });

            modelBuilder.Entity("QatarPaymentTest.Models.Entities.CustomField", b =>
                {
                    b.Navigation("CompanyValues");

                    b.Navigation("ContactValues");
                });
#pragma warning restore 612, 618
        }
    }
}
